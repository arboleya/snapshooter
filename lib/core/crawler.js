// Generated by CoffeeScript 1.6.2
(function() {
  var Crawler, pd, phantom,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  phantom = require('phantom');

  pd = (require('pretty-data')).pd;

  /*
    Create and instance of phantom
  */


  module.exports = Crawler = (function() {
    var port;

    Crawler.prototype.ph = null;

    Crawler.prototype.page = null;

    port = 12345;

    function Crawler(cli, url, done) {
      var _this = this;

      this.cli = cli;
      this.url = url;
      this.done = done;
      this.keep_on_checking = __bind(this.keep_on_checking, this);
      phantom.create(function(ph, err1) {
        _this.ph = ph;
        if (err1 != null) {
          console.error('err1', err1);
        }
        return _this.ph.createPage(function(page, err2) {
          _this.page = page;
          if (err2 != null) {
            console.error('err1', err2);
          }
          return _this.page.open(_this.url, function(status) {
            if (status !== 'success') {
              console.error(_this.url, 'ended with status = ' + status);
            }
            return _this.keep_on_checking();
          });
        });
      }, 'phantomjs', port++);
    }

    Crawler.prototype.keep_on_checking = function() {
      var _this = this;

      return this.page.evaluate(function() {
        var data;

        return data = {
          rendered: window.crawler && window.crawler.is_rendered,
          source: document.all[0].outerHTML
        };
      }, function(data, error) {
        if (!(data != null ? data.rendered : void 0)) {
          return setTimeout(_this.keep_on_checking, 10);
        }
        _this.ph.exit();
        if (_this.cli.argv.pretty) {
          return _this.done(pd.xml(data.source));
        } else {
          return _this.done(data.source);
        }
      });
    };

    return Crawler;

  })();

}).call(this);

/*
//@ sourceMappingURL=crawler.map
*/
