// Generated by CoffeeScript 1.6.2
(function() {
  var Crawler, Shoot, connect, exec, fs, fsu, path;

  fs = require('fs');

  exec = (require('child_process')).exec;

  path = require('path');

  fsu = require('fs-util');

  connect = require('connect');

  Crawler = require('./crawler');

  /*
    Instantiate a crawler for the first url,
    Crawler returns a source and "<a href=''>" links url
  
    The links url are filtered ( i.e. external links are not crawled ),
    and then written to disk
  */


  module.exports = Shoot = (function() {
    Shoot.prototype.crawled = {};

    Shoot.prototype.root_url = null;

    Shoot.prototype.pending_urls = null;

    Shoot.prototype.connections = 0;

    Shoot.prototype.max_connections = 10;

    Shoot.prototype.start_time = null;

    Shoot.prototype.crawled_files_num = 0;

    Shoot.prototype.failed_files_num = 0;

    function Shoot(the, cli) {
      var code, first_url, msg;

      this.the = the;
      this.cli = cli;
      if (!this.has_phantom()) {
        msg = "" + 'Error'.bold.red + " Install " + 'phantomjs'.yellow + " before indexing pages!\n  • http://phantomjs.org";
        console.log(msg);
        process.exit(code = process.ENOENT);
      }
      this.pending_urls = [];
      if (this.cli.argv.address) {
        if (!~this.cli.argv.address.indexOf('http')) {
          first_url = 'http://' + this.cli.argv.address;
          this.root_url = (first_url.match(/https?:\/\/[^\/]+/))[0];
        }
      } else {
        this.root_url = first_url = this.cli.argv.file;
      }
      this.start_time = (new Date).getTime();
      this.crawl(first_url);
    }

    Shoot.prototype.crawl = function(url) {
      var _this = this;

      if (this.crawled[url] === true) {
        return;
      }
      this.crawled[url] = false;
      if (!this.cli.argv.stdout) {
        console.log('>'.bold.yellow, url.grey);
      }
      this.connections++;
      return new Crawler(this.cli, url, function(source) {
        if (!_this.cli.argv.stdout) {
          console.log('< '.bold.cyan, url.grey);
        }
        _this.connections--;
        _this.crawled[url] = true;
        if (source != null) {
          _this.crawled_files_num++;
        } else {
          _this.failed_files_num++;
        }
        if (source != null) {
          if (_this.cli.argv.once) {
            if (_this.cli.argv.stdout) {
              console.log(source);
            } else {
              _this.save_page(url, source);
            }
            return _this.finish();
          }
          _this.save_page(url, source);
          return _this.after_crawl(source);
        }
      });
    };

    Shoot.prototype.after_crawl = function(source) {
      var absolute, links, match, not_anchor, not_crawled, not_image, not_slash, not_zip, reg, relative;

      reg = /<a\s+href\s*=\s*["']+(?!http)([^"']+)/g;
      links = [];
      if (source != null) {
        while ((match = reg.exec(source)) != null) {
          relative = match[1];
          absolute = this.root_url + relative;
          not_slash = relative !== '/';
          not_crawled = this.crawled[absolute] == null;
          not_anchor = relative !== '#';
          not_image = !(/\.(jpg|jpeg|gif|png)$/m.test(relative));
          not_zip = !(/\.(zip|tar(\.gz)?)$/m.test(relative));
          if (not_slash && not_image && not_anchor && not_crawled && not_zip) {
            this.pending_urls.push(absolute);
          }
        }
      }
      while (this.connections < this.max_connections && this.pending_urls.length) {
        this.crawl(this.pending_urls.shift());
      }
      if (this.connections === 0) {
        return this.finish();
      }
    };

    Shoot.prototype.save_page = function(url, source) {
      var output_file, output_folder, relative_url;

      relative_url = (url.replace(this.root_url, '')) || '/';
      output_folder = path.join(this.cli.argv.output, relative_url);
      output_file = path.join(output_folder, 'index.html');
      if (!fs.existsSync(output_folder)) {
        fsu.mkdir_p(output_folder);
      }
      fs.writeFileSync(output_file, source);
      return console.log('✓ '.green, relative_url);
    };

    Shoot.prototype.finish = function() {
      var address, ms;

      if (!this.cli.argv.stdout) {
        ms = ((new Date).getTime() - this.start_time) + ' ms';
        console.log(("\n★  Application crawled successfully in " + ms.magenta).green);
        console.log('\t Indexed: ' + this.crawled_files_num);
        console.log('\t Fail: ' + this.failed_files_num);
      }
      if (!this.cli.argv.server) {
        return;
      }
      this.conn = connect().use(connect["static"](this.cli.argv.output)).listen(this.cli.argv.port);
      address = 'http://localhost:' + this.cli.argv.port;
      return console.log('\nPreview server started at: \n\t'.grey, address);
    };

    Shoot.prototype.has_phantom = function() {
      var _this = this;

      return exec("phantomjs -v", function(error, stdout, stderr) {
        return /phantomjs: command not found/.test(stderr);
      });
    };

    return Shoot;

  })();

}).call(this);

/*
//@ sourceMappingURL=shoot.map
*/
