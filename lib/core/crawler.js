// Generated by CoffeeScript 1.6.3
(function() {
  var Crawler, pd, phantom,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  phantom = require('phantom');

  pd = (require('pretty-data')).pd;

  /*
    Create and instantiate phantomjs thought phantom
  */


  module.exports = Crawler = (function() {
    var ph, port;

    ph = null;

    port = 12345;

    Crawler.prototype.page = null;

    Crawler.prototype.start_time = null;

    function Crawler(cli, url, done, just_create_phantom) {
      var _this = this;
      this.cli = cli;
      this.url = url;
      this.done = done;
      this.keep_on_checking = __bind(this.keep_on_checking, this);
      if (just_create_phantom) {
        return this.create_phantom(function() {
          return true;
        });
      }
      this.start_time = (new Date).getTime();
      this.create_phantom(function() {
        return _this.create_page(function() {
          return _this.open_url();
        });
      });
    }

    Crawler.kill = function() {
      if (ph != null) {
        return ph.exit();
      }
    };

    Crawler.prototype.create_phantom = function(done) {
      var _this = this;
      if (ph != null) {
        return done();
      }
      return phantom.create('--load-images=false', function(_ph, err) {
        var msg;
        if (err != null) {
          msg = '• ERROR '.bold.red + 'phantom.create couldn\'t finish for '.red;
          msg += _this.url.yellow;
          return _this.error(msg, err);
        }
        ph = _ph;
        return done();
      }, {
        binary: 'phantomjs',
        port: port++
      });
    };

    Crawler.prototype.create_page = function(done) {
      var _this = this;
      return ph.createPage(function(page, err) {
        var msg;
        _this.page = page;
        if (err != null) {
          msg = '• ERROR '.bold.red + 'ph.createPage couldn\'t finish for '.red;
          msg += _this.url.yellow;
          return _this.error(msg, err);
        }
        if (_this.cli.argv.log && !_this.cli.argv.stdout && !_this.cli.argv.live) {
          _this.page.set('onConsoleMessage', function(msg) {
            return console.log(msg);
          });
        }
        if (!_this.cli.argv.hidden) {
          _this.page.set('onInitialized', function() {
            return _this.page.evaluate(function() {
              return window.snapshooter = true;
            });
          });
        }
        return done();
      });
    };

    Crawler.prototype.open_url = function() {
      var _this = this;
      return this.page.open(this.url, function(status, err) {
        var msg;
        if (err != null) {
          msg = '• ERROR '.bold.red + 'page.open couldn\'t finish for '.red;
          msg += _this.url.yellow;
          return _this.error(msg, err);
        }
        if (status !== 'success') {
          msg = '• ERROR '.bold.red + ' ' + _this.url.yellow;
          msg += " ended with status = ".red + status.bold;
          return _this.error(msg);
        }
        return _this.keep_on_checking();
      });
    };

    Crawler.prototype.keep_on_checking = function() {
      var _this = this;
      return this.page.evaluate(function() {
        var data;
        return data = {
          rendered: window.crawler && window.crawler.is_rendered,
          source: document.all[0].outerHTML
        };
      }, function(data) {
        var msg;
        if (!(data != null ? data.rendered : void 0)) {
          if (((new Date).getTime()) - _this.start_time > (_this.cli.argv.timeout * 1000)) {
            msg = '• ERROR '.bold.red + _this.url.yellow;
            msg += ' took too long to render, skipping'.red;
            return _this.error(msg);
          } else {
            return setTimeout(_this.keep_on_checking, 100);
          }
        }
        if (_this.cli.argv.pretty) {
          return _this.done(pd.xml(data.source));
        } else {
          return _this.done(data.source.replace(/\n/g, ''));
        }
      });
    };

    Crawler.prototype.error = function(msg, error) {
      console.error(msg);
      if (error != null) {
        console.error(error);
      }
      Crawler.kill();
      return this.done(null);
    };

    return Crawler;

  })();

}).call(this);

/*
//@ sourceMappingURL=crawler.map
*/
